<?php 

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\user\Entity\User;

/**
 * Implements hook_entity_operation_alter().
 *
 * @param unknown $operations
 * @param EntityInterface $entity
 */
function dyniva_permission_entity_operation_alter(&$operations,EntityInterface $entity){
  if($entity->getEntityTypeId() == 'user'){
    $url = Url::fromRoute('view.user_manage_roles.page_list',['user' => $entity->id()]);
    $access = \Drupal::accessManager()->checkNamedRoute($url->getRouteName(),$url->getRouteParameters());
    if($access){
      $operations['roles'] = [
        'title' => t('Roles'),
        'url' => $url,
        'weight' => 0
      ];
    }
  }
}
/**
 * 
 * @param unknown $tid
 * @param unknown $uid
 * @param string $hierarchy
 * @return Returns|boolean|\Drupal\Core\Database\A
 */
function dyniva_permission_user_has_permisson($tid, $uid = NULL, $hierarchy = TRUE){
  
  $cache = &drupal_static(__FUNCTION__);
  
  if(empty($uid)){
    $uid = \Drupal::currentUser()->id();
  }
  $key = "{$tid}:{$uid}:{$hierarchy}";
  if(isset($cache[$key])){
    return $cache[$key];
  }
  $result = false;
  if($hierarchy){
    $level = 9;
    
    $q0 =  \Drupal::database()->select('dyniva_permission','cp');
    $q0->condition('cp.uid',$uid);
    
    $qr = clone $q0;
    $qr->join('taxonomy_term__parent', 'h1', 'h1.parent_target_id = cp.tid');
    
    $q1 = clone $qr;
    $q0->addField('cp', 'tid');
    $q1->addField('h1', 'entity_id', 'tid');
    $sub_query = $q0->union($q1);
    for($i=2;$i<=$level;$i++){
      $j = $i-1;
      $qr->join('taxonomy_term__parent', "h{$i}", "h{$i}.parent_target_id = h{$j}.entity_id");
      
      $q = clone $qr;
      $q->addField("h{$i}", 'entity_id', 'tid');
      $sub_query = $sub_query->union($q);
    }
    
    $query = db_select($sub_query,'t');
    $query->condition('tid',$tid);
    $query->addField('t', 'tid');
    $count = $query->countQuery();
    $result = $count->execute()->fetchField();
    
  }else{
    $sub_query = \Drupal::database()->select('dyniva_permission','cp');
    $sub_query->condition('cp.uid',$uid);
    $sub_query->condition('cp.tid',$tid);
    $sub_query->addField('cp', 'tid');
    $result = $sub_query->execute()->fetchField();
  }
  
  $cache[$key] = $result;
  
  return $result;
}
/**
 * 
 * @param unknown $uid
 * @param unknown $tid
 * @param unknown $rid
 */
function dyniva_permission_add_permission($uid, $tid, $rid){
  $storage = \Drupal::entityTypeManager()->getStorage('dyniva_permission');
  $values = [
    'uid' => $uid,
    'rid' => $rid,
    'tid' => $tid,
  ];
  $exists = $storage->loadByProperties($values);
  if(empty($exists)){
    $permission = $storage->create($values);
    $permission->save();
  }
}
/**
 * 
 * @param unknown $uid
 * @param unknown $tid
 * @param unknown $rid
 */
function dyniva_permission_clean_user_permission($uid, $tid = null, $rid = null){
  $storage = \Drupal::entityTypeManager()->getStorage('dyniva_permission');
  $values = [
    'uid' => $uid,
  ];
  if($tid){
    $values['tid'] = $tid;
  }
  if($rid){
    $values['rid'] = $rid;
  }
  $exists = $storage->loadByProperties($values);
  if(!empty($exists)){
    foreach ($exists as $permission){
      $permission->delete();
    }
  }
}
/**
 * Implements hook_form_alter().
 * @param unknown $form
 * @param FormStateInterface $form_state
 * @param unknown $form_id
 */
function dyniva_permission_form_alter(&$form, FormStateInterface $form_state, $form_id){
  
  if($form_id == 'user_form'){
    $user = \Drupal::currentUser();
    if(!in_array('administrator',$user->getRoles())){
      $form['account']['roles']['#access'] = false;
    }
  }
  
  if(\Drupal::currentUser()->hasPermission('by pass ccms premission')){
    return;
  }
  
  $enable_field_limit = \Drupal::state()->get('dyniva_permission.enable_field_limit', 0);
  $form_object = $form_state->getFormObject();
  if($enable_field_limit && $form_object instanceof ContentEntityForm){
    $permission_field_name = \Drupal::state()->get('dyniva_permission.permission_field_name','department');
    
    if(isset($form[$permission_field_name]['widget']['#options'])){
      $options = $form[$permission_field_name]['widget']['#options'];
      $uid = \Drupal::currentUser()->id();
      foreach ($options as $key => $item){
        if(is_numeric($key)){
          if(!dyniva_permission_user_has_permisson($key,$uid)){
            unset($options[$key]);
          }
        }
      }
      $form[$permission_field_name]['widget']['#options'] = $options;
    }
  }
}
/**
 *
 * @ingroup entity_crud
 * @see hook_ENTITY_TYPE_presave()
 */
function dyniva_permission_user_presave(User $entity) {
  $sub_query = \Drupal::database()->select('dyniva_permission','cp');
  $sub_query->condition('cp.uid',$entity->id());
  $sub_query->addField('cp', 'rid');
  $result = $sub_query->distinct()->execute()->fetchAllAssoc('rid');
  foreach ($result as $rid => $row){
    $entity->addRole($rid);
  }
}
